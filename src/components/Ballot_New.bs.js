// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as Core from "../Core.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as State from "../State.bs.js";
import * as React from "react";
import * as Context from "../helpers/Context.bs.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Election from "../model/Election.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as ReactNativePaper from "react-native-paper";

function Ballot_New$Choice(Props) {
  var name = Props.name;
  var selected = Props.selected;
  var onSelect = Props.onSelect;
  var iconName = selected ? "radiobox-marked" : "radiobox-blank";
  return React.createElement(ReactNativePaper.List.Item, {
              onPress: (function (param) {
                  Curry._1(onSelect, undefined);
                }),
              title: name,
              left: (function (param) {
                  return React.createElement(ReactNativePaper.List.Icon, {
                              icon: iconName
                            });
                })
            });
}

var Choice = {
  make: Ballot_New$Choice
};

function Ballot_New(Props) {
  var ballotId = Props.ballotId;
  var match = Context.use(undefined);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        
      });
  var setChoice = match$1[1];
  var choice = match$1[0];
  var ballot = State.getBallot(state, ballotId);
  var election = State.getElection(state, ballot.electionId);
  var owner = Belt_Array.getBy(state.ids, (function (id) {
          return ballot.voterPublicKey === id.hexPublicKey;
        }));
  if (owner !== undefined) {
    return React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Section, {
                    title: "Choices",
                    children: Belt_Array.mapWithIndex(Election.choices(election), (function (i, choiceName) {
                            var selected = Caml_obj.equal(choice, i);
                            return React.createElement(Ballot_New$Choice, {
                                        name: choiceName,
                                        selected: selected,
                                        onSelect: (function (param) {
                                            Curry._1(setChoice, (function (param) {
                                                    return i;
                                                  }));
                                          }),
                                        key: String(i)
                                      });
                          }))
                  }), React.createElement(ReactNativePaper.Button, {
                    mode: "contained",
                    onPress: (function (param) {
                        var nbChoices = Election.choices(election).length;
                        Core.Ballot.vote(ballot, choice, nbChoices, state, dispatch);
                      }),
                    children: "Voter"
                  }));
  } else {
    return React.createElement(ReactNativePaper.Title, {
                style: X.styles.title,
                children: "You don't have voting right"
              });
  }
}

var make = Ballot_New;

export {
  Choice ,
  make ,
}
/* X Not a pure module */
