// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as State from "../State.bs.js";
import * as React from "react";
import * as Config from "../helpers/Config.bs.js";
import * as Mailer from "../helpers/Mailer.bs.js";
import * as Context from "../helpers/Context.bs.js";
import * as Identity from "../model/Identity.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Transaction from "../model/Transaction.bs.js";
import * as ReactNative from "react-native";
import * as ReactNativePaper from "react-native-paper";

function ElectionShow__AddByEmailButton(Props) {
  var electionId = Props.electionId;
  var match = Context.use(undefined);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setEmail = match$1[1];
  var email = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setshowModal = match$2[1];
  var election = State.getElection(state, electionId);
  var orgId = Belt_Option.getExn(Belt_Array.getBy(state.ids, (function (id) {
              return id.hexPublicKey === election.ownerPublicKey;
            })));
  var onSubmit = function (param) {
    var voterId = Identity.make(undefined);
    var contact_hexPublicKey = voterId.hexPublicKey;
    var contact_email = email;
    var contact = {
      hexPublicKey: contact_hexPublicKey,
      email: contact_email,
      phoneNumber: undefined
    };
    Curry._1(dispatch, {
          TAG: /* Contact_Add */5,
          _0: contact
        });
    var ballot_electionPublicKey = election.ownerPublicKey;
    var ballot_voterPublicKey = voterId.hexPublicKey;
    var ballot = {
      electionTx: electionId,
      previousTx: undefined,
      electionPublicKey: ballot_electionPublicKey,
      voterPublicKey: ballot_voterPublicKey,
      ciphertext: undefined,
      pubcred: undefined
    };
    var tx = Transaction.SignedBallot.make(ballot, orgId);
    Curry._1(dispatch, {
          TAG: /* Transaction_Add_With_Broadcast */3,
          _0: tx
        });
    if (Config.env === "dev") {
      console.log(voterId.hexSecretKey);
    } else {
      var ballotId = tx.contentHash;
      Mailer.send(ballotId, orgId, voterId, email);
    }
    Curry._1(setEmail, (function (param) {
            return "";
          }));
    Curry._1(setshowModal, (function (param) {
            return false;
          }));
  };
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.Button, {
                  mode: "outlined",
                  onPress: (function (param) {
                      Curry._1(setshowModal, (function (param) {
                              return true;
                            }));
                    }),
                  children: "Add voter by email"
                }), React.createElement(ReactNativePaper.Portal, {
                  children: React.createElement(ReactNativePaper.Modal, {
                        visible: match$2[0],
                        onDismiss: (function (param) {
                            Curry._1(setshowModal, (function (param) {
                                    return false;
                                  }));
                          }),
                        children: React.createElement(ReactNative.View, {
                              style: ReactNative.StyleSheet.flatten([
                                    X.styles.modal,
                                    X.styles.layout
                                  ]),
                              testID: "choice-modal",
                              children: null
                            }, React.createElement(ReactNativePaper.Title, {
                                  style: X.styles.title,
                                  children: "Invite someone by email"
                                }), React.createElement(ReactNativePaper.TextInput, {
                                  mode: "flat",
                                  autoFocus: true,
                                  label: "Email",
                                  value: email,
                                  onChangeText: (function (text) {
                                      Curry._1(setEmail, (function (param) {
                                              return text;
                                            }));
                                    }),
                                  onSubmitEditing: onSubmit
                                }), React.createElement(X.Row.make, {
                                  children: null
                                }, React.createElement(X.Col.make, {
                                      children: React.createElement(ReactNativePaper.Button, {
                                            onPress: (function (param) {
                                                Curry._1(setEmail, (function (param) {
                                                        return "";
                                                      }));
                                                Curry._1(setshowModal, (function (param) {
                                                        return false;
                                                      }));
                                              }),
                                            children: "Retour"
                                          })
                                    }), React.createElement(X.Col.make, {
                                      children: React.createElement(ReactNativePaper.Button, {
                                            mode: "outlined",
                                            onPress: onSubmit,
                                            children: "Add as voter"
                                          })
                                    })))
                      })
                }));
}

var make = ElectionShow__AddByEmailButton;

export {
  make ,
}
/* X Not a pure module */
