// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as Core from "../Core.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as State from "../State.bs.js";
import * as React from "react";
import * as Context from "../helpers/Context.bs.js";
import * as Belenios from "../helpers/Belenios.bs.js";
import * as Election from "../model/Election.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as ReactNativePaper from "react-native-paper";
import * as ElectionShow__ResultChart from "./ElectionShow__ResultChart.bs.js";
import * as ElectionShow__AddByEmailButton from "./ElectionShow__AddByEmailButton.bs.js";
import * as ElectionShow__AddContactButton from "./ElectionShow__AddContactButton.bs.js";

function ElectionShow(Props) {
  var contentHash = Props.contentHash;
  var match = Context.use(undefined);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        return false;
      });
  var setShowAdvanced = match$1[1];
  var showAdvanced = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowBallots = match$2[1];
  var showBallots = match$2[0];
  var election = State.getElection(state, contentHash);
  var orgId = Belt_Array.getBy(state.ids, (function (id) {
          return id.hexPublicKey === election.ownerPublicKey;
        }));
  var ballots = Belt_MapString.toArray(Belt_MapString.keep(state.cached_ballots, (function (_id, ballot) {
              return ballot.electionTx === contentHash;
            })));
  var nbBallots = ballots.length;
  var nbBallotsWithCiphertext = Belt_Array.keep(ballots, (function (param) {
          return Belt_Option.isSome(param[1].ciphertext);
        })).length;
  var progress = "" + String(nbBallotsWithCiphertext) + " / " + String(nbBallots) + "";
  var tally = Belt_Option.map(Belt_MapString.findFirstBy(state.cached_tallies, (function (_id, tally) {
              return tally.electionTx === contentHash;
            })), (function (param) {
          return param[1];
        }));
  var tmp;
  if (showAdvanced) {
    var onPress = function (param) {
      Curry._1(dispatch, {
            TAG: /* Navigate */0,
            _0: {
              TAG: /* Identity_Show */1,
              _0: election.ownerPublicKey
            }
          });
    };
    tmp = React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Item, {
              title: "Event Hash",
              description: contentHash
            }), React.createElement(ReactNativePaper.List.Item, {
              onPress: onPress,
              title: "Owner Public Key",
              description: election.ownerPublicKey
            }), React.createElement(ReactNativePaper.List.Item, {
              title: "Params",
              description: election.params
            }), React.createElement(ReactNativePaper.List.Item, {
              title: "Trustees",
              description: election.trustees
            }));
  } else {
    tmp = React.createElement(React.Fragment, undefined);
  }
  var tmp$1;
  if (Belt_Option.isSome(tally)) {
    var result = Belt_Option.getExn(tally).result;
    var data = Belenios.Election.scores(result);
    tmp$1 = React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Item, {
              title: "Result",
              description: Belt_Option.getExn(tally).result
            }), React.createElement(ElectionShow__ResultChart.make, {
              data: data
            }));
  } else {
    tmp$1 = Belt_Option.isSome(orgId) ? React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.Title, {
                style: X.styles.title,
                children: "You are admin"
              }), React.createElement(ElectionShow__AddByEmailButton.make, {
                contentHash: contentHash
              }), React.createElement(ElectionShow__AddContactButton.make, {
                contentHash: contentHash
              }), React.createElement(ReactNativePaper.Button, {
                mode: "outlined",
                onPress: (function (param) {
                    Core.Election.tally(contentHash, state, dispatch);
                  }),
                children: "Close election and tally"
              })) : React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.Title, {
                style: X.styles.title,
                children: "You are not admin"
              }));
  }
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Section, {
                  title: "",
                  children: null
                }, React.createElement(ReactNativePaper.List.Item, {
                      title: Election.name(election),
                      description: Election.description(election)
                    }), React.createElement(ReactNativePaper.List.Section, {
                      title: "Choix",
                      children: Belt_Array.mapWithIndex(Election.choices(election), (function (i, name) {
                              return React.createElement(ReactNativePaper.List.Item, {
                                          title: name,
                                          key: String(i)
                                        });
                            }))
                    }), React.createElement(ReactNativePaper.List.Item, {
                      title: "Status",
                      description: Belt_Option.isSome(tally) ? "Finished" : "En cours"
                    }), React.createElement(ReactNativePaper.Button, {
                      mode: "outlined",
                      onPress: (function (param) {
                          Curry._1(setShowAdvanced, (function (b) {
                                  return !b;
                                }));
                        }),
                      children: showAdvanced ? "Hide advanced" : "Show advanced"
                    }), tmp, React.createElement(ReactNativePaper.List.Item, {
                      title: "Ballot transactions",
                      description: progress
                    }), React.createElement(ReactNativePaper.Button, {
                      mode: "outlined",
                      onPress: (function (param) {
                          Curry._1(setShowBallots, (function (b) {
                                  return !b;
                                }));
                        }),
                      children: showBallots ? "Hide ballots" : "Show ballots"
                    }), showBallots ? React.createElement(ReactNativePaper.List.Section, {
                        title: "" + String(nbBallots) + " ballots",
                        children: Belt_Array.map(ballots, (function (param) {
                                var id = param[0];
                                return React.createElement(ReactNativePaper.List.Item, {
                                            onPress: (function (param) {
                                                Curry._1(dispatch, {
                                                      TAG: /* Navigate */0,
                                                      _0: {
                                                        TAG: /* Ballot_Show */2,
                                                        _0: id
                                                      }
                                                    });
                                              }),
                                            title: "Ballot " + id + "",
                                            key: id
                                          });
                              }))
                      }) : React.createElement(React.Fragment, undefined)), tmp$1);
}

var make = ElectionShow;

export {
  make ,
}
/* X Not a pure module */
