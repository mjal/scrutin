// Generated by ReScript, PLEASE EDIT WITH CARE

import * as X from "../helpers/X.bs.js";
import * as Core from "../Core.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Config from "../helpers/Config.bs.js";
import * as Mailer from "../helpers/Mailer.bs.js";
import * as Context from "../helpers/Context.bs.js";
import * as Election from "../model/Election.bs.js";
import * as Identity from "../model/Identity.bs.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Transaction from "../model/Transaction.bs.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";
import * as ReactNativePaper from "react-native-paper";

function Election_Show(Props) {
  var contentHash = Props.contentHash;
  var match = Context.use(undefined);
  var dispatch = match[1];
  var state = match[0];
  var match$1 = React.useState(function () {
        return "";
      });
  var setEmail = match$1[1];
  var email = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setShowAdvanced = match$2[1];
  var showAdvanced = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setShowBallots = match$3[1];
  var showBallots = match$3[0];
  var election = Belt_MapString.getExn(state.cached_elections, contentHash);
  var publicKey = election.ownerPublicKey;
  var orgId = Belt_Array.getBy(state.ids, (function (id) {
          return id.hexPublicKey === election.ownerPublicKey;
        }));
  var ballots = Belt_Array.keep(Belt_Array.keep(state.txs, (function (tx) {
              return tx.type_ === "ballot";
            })), (function (tx) {
          var ballot = Transaction.SignedBallot.unwrap(tx);
          return ballot.electionTx === contentHash;
        }));
  var nbBallots = ballots.length;
  var nbBallotsWithCiphertext = Belt_Array.keep(ballots, (function (tx) {
          var ballot = Transaction.SignedBallot.unwrap(tx);
          return Belt_Option.isSome(ballot.ciphertext);
        })).length;
  var progress = "" + String(nbBallotsWithCiphertext) + " votes / " + String(nbBallots) + "";
  var addBallot = function (param) {
    var voterId = Identity.make(undefined);
    var contact_hexPublicKey = voterId.hexPublicKey;
    var contact_email = email;
    var contact = {
      hexPublicKey: contact_hexPublicKey,
      email: contact_email,
      phoneNumber: undefined
    };
    Curry._1(dispatch, {
          TAG: /* Contact_Add */5,
          _0: contact
        });
    var ballot_electionPublicKey = election.ownerPublicKey;
    var ballot_voterPublicKey = voterId.hexPublicKey;
    var ballot = {
      electionTx: contentHash,
      previousTx: undefined,
      electionPublicKey: ballot_electionPublicKey,
      voterPublicKey: ballot_voterPublicKey,
      ciphertext: undefined,
      pubcred: undefined
    };
    var orgId$1 = Belt_Option.getExn(orgId);
    var tx = Transaction.SignedBallot.make(ballot, orgId$1);
    Curry._1(dispatch, {
          TAG: /* Transaction_Add_With_Broadcast */3,
          _0: tx
        });
    if (Config.env === "dev") {
      console.log(voterId.hexSecretKey);
      return ;
    }
    var ballotId = tx.contentHash;
    Mailer.send(ballotId, orgId$1, voterId, email);
  };
  var tmp;
  if (showAdvanced) {
    var onPress = function (param) {
      Curry._1(dispatch, {
            TAG: /* Navigate */0,
            _0: {
              TAG: /* Identity_Show */1,
              _0: publicKey
            }
          });
    };
    tmp = React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Item, {
              title: "Event Hash",
              description: contentHash
            }), React.createElement(ReactNativePaper.List.Item, {
              onPress: onPress,
              title: "Owner Public Key",
              description: publicKey
            }), React.createElement(ReactNativePaper.List.Item, {
              title: "Params",
              description: election.params
            }), React.createElement(ReactNativePaper.List.Item, {
              title: "Trustees",
              description: election.trustees
            }));
  } else {
    tmp = React.createElement(React.Fragment, undefined);
  }
  return React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.List.Section, {
                  title: "Election",
                  children: null
                }, React.createElement(ReactNativePaper.List.Item, {
                      title: "Name",
                      description: Election.name(election)
                    }), React.createElement(ReactNativePaper.List.Item, {
                      title: "Description",
                      description: Election.description(election)
                    }), React.createElement(ReactNativePaper.Button, {
                      mode: "outlined",
                      onPress: (function (param) {
                          Curry._1(setShowAdvanced, (function (b) {
                                  return !b;
                                }));
                        }),
                      children: showAdvanced ? "Hide advanced" : "Show advanced"
                    }), tmp, React.createElement(ReactNativePaper.List.Item, {
                      title: "Votes",
                      description: progress
                    }), React.createElement(ReactNativePaper.Button, {
                      mode: "outlined",
                      onPress: (function (param) {
                          Curry._1(setShowBallots, (function (b) {
                                  return !b;
                                }));
                        }),
                      children: showBallots ? "Hide ballots" : "Show ballots"
                    }), showBallots ? React.createElement(ReactNativePaper.List.Section, {
                        title: "" + String(nbBallots) + " ballots",
                        children: Belt_Array.map(ballots, (function (tx) {
                                Transaction.SignedBallot.unwrap(tx);
                                return React.createElement(ReactNativePaper.List.Item, {
                                            onPress: (function (param) {
                                                Curry._1(dispatch, {
                                                      TAG: /* Navigate */0,
                                                      _0: {
                                                        TAG: /* Ballot_Show */2,
                                                        _0: tx.contentHash
                                                      }
                                                    });
                                              }),
                                            title: "Ballot " + tx.contentHash + "",
                                            key: tx.contentHash
                                          });
                              }))
                      }) : React.createElement(React.Fragment, undefined)), Belt_Option.isSome(orgId) ? React.createElement(React.Fragment, undefined, React.createElement(ReactNativePaper.Title, {
                        style: X.styles.title,
                        children: "You are admin"
                      }), React.createElement(ReactNativePaper.Title, {
                        style: X.styles.title,
                        children: "Invite someone"
                      }), React.createElement(ReactNativePaper.TextInput, {
                        mode: "flat",
                        label: "Email",
                        value: email,
                        onChangeText: (function (text) {
                            Curry._1(setEmail, (function (param) {
                                    return text;
                                  }));
                          })
                      }), React.createElement(ReactNativePaper.Button, {
                        mode: "outlined",
                        onPress: addBallot,
                        children: "Add as voter"
                      }), React.createElement(ReactNativePaper.Button, {
                        mode: "outlined",
                        onPress: (function (param) {
                            Core.Election.tally(contentHash, state, dispatch);
                          }),
                        children: "Close election and tally"
                      })) : React.createElement(ReactNativePaper.Title, {
                    style: X.styles.title,
                    children: "You are not admin"
                  }));
}

var make = Election_Show;

export {
  make ,
}
/* X Not a pure module */
