// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Sjcl from "../helpers/Sjcl.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as SjclWithAll from "sjcl-with-all";
import * as AsyncStorage from "@react-native-async-storage/async-storage";

function make(param) {
  var match = Sjcl.Ecdsa.$$new(undefined);
  return {
          hexPublicKey: Curry._1(Sjcl.Ecdsa.PublicKey.toHex, match[0]),
          hexSecretKey: Curry._1(Sjcl.Ecdsa.SecretKey.toHex, match[1]),
          email: undefined,
          phoneNumber: undefined
        };
}

function make2(hexSecretKey) {
  var sec = SjclWithAll.bn.fromBits(SjclWithAll.codec.hex.toBits(hexSecretKey));
  var keys = Sjcl.Ecdsa.generateKeysFromSecretKey(sec);
  var hexPublicKey = Curry._1(Sjcl.Ecdsa.PublicKey.toHex, keys.pub);
  return {
          hexPublicKey: hexPublicKey,
          hexSecretKey: hexSecretKey,
          email: undefined,
          phoneNumber: undefined
        };
}

var storageKey = "identities";

function fetch_all(param) {
  return AsyncStorage.default.getItem(storageKey).then(function (prim) {
                  if (prim === null) {
                    return ;
                  } else {
                    return Caml_option.some(prim);
                  }
                }).then(function (__x) {
                return Belt_Option.map(__x, (function (prim) {
                              return JSON.parse(prim);
                            }));
              }).then(function (__x) {
              return Belt_Option.getWithDefault(__x, []);
            });
}

function store_all(ids) {
  AsyncStorage.default.setItem(storageKey, JSON.stringify(ids));
}

function clear(param) {
  AsyncStorage.default.removeItem(storageKey);
}

function signHex(id, hexStr) {
  var hexSecretKey = Belt_Option.getExn(id.hexSecretKey);
  var secretKey = Curry._1(Sjcl.Ecdsa.SecretKey.fromHex, hexSecretKey);
  var baEventHash = SjclWithAll.codec.hex.toBits(hexStr);
  return SjclWithAll.codec.hex.fromBits(secretKey.sign(baEventHash));
}

export {
  make ,
  make2 ,
  storageKey ,
  fetch_all ,
  store_all ,
  clear ,
  signHex ,
}
/* Sjcl Not a pure module */
